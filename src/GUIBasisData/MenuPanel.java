/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUIBasisData;

import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TUF GAMING
 */
public class MenuPanel extends javax.swing.JPanel {
    /**
     * Creates new form MenuPanel
     */
    public MenuPanel() {
        initComponents();
        menu.add(panel);
        setOpaque(false);
        jTextField16.setEditable(false);
        jTextField17.setEditable(false);
        updateComboBox();
        jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,18));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(255,255,102));
        
        jTable2.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,18));
        jTable2.getTableHeader().setOpaque(false);
        jTable2.getTableHeader().setBackground(new Color(255,255,102));
        
        jTable3.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,18));
        jTable3.getTableHeader().setOpaque(false);
        jTable3.getTableHeader().setBackground(new Color(255,255,102));
        
        jTable4.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,18));
        jTable4.getTableHeader().setOpaque(false);
        jTable4.getTableHeader().setBackground(new Color(255,255,102));
        
        jTable5.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD,18));
        jTable5.getTableHeader().setOpaque(false);
        jTable5.getTableHeader().setBackground(new Color(255,255,102));
        
        jPanel8.setVisible(false);
        jPanel9.setVisible(true);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        menu = new javax.swing.JPopupMenu();
        panel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        list2 = new javax.swing.JList<>();
        menu2 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton26 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton27 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton28 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton29 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jTextField26 = new javax.swing.JTextField();
        jTextField27 = new javax.swing.JTextField();
        jTextField28 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton30 = new javax.swing.JButton();

        jScrollPane6.setViewportView(list);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        menu.setFocusable(false);

        jScrollPane7.setViewportView(list2);

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 212, Short.MAX_VALUE)
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
        );

        menu2.setFocusable(false);

        setPreferredSize(new java.awt.Dimension(700, 553));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI Historic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(187, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_2_3066808047.png"))); // NOI18N
        jLabel1.setText(" UB Guest House");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel2.setOpaque(false);
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(187, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_6_7459245597.png"))); // NOI18N
        jLabel2.setText("Customer");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel2)
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 89, 290, -1));

        jPanel3.setOpaque(false);
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(187, 0, 0));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_4_2980737473.png"))); // NOI18N
        jLabel3.setText("Ordering");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel3)
                .addContainerGap(107, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 176, 290, -1));

        jPanel4.setOpaque(false);
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(187, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_8_6971273508.png"))); // NOI18N
        jLabel4.setText("Billing");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel4)
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 260, -1, -1));

        jPanel5.setOpaque(false);
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(187, 0, 0));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_5_2457773123.png"))); // NOI18N
        jLabel6.setText("Kamar");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel6)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 344, -1, -1));

        jPanel6.setOpaque(false);
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(187, 0, 0));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/imageedit_7_7730500980.png"))); // NOI18N
        jLabel5.setText("Tipe Kamar");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel5)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 428, -1, -1));

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel8.setBackground(new java.awt.Color(255, 204, 51));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(187, 0, 0));
        jLabel7.setText("ID Order");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(187, 0, 0));
        jLabel8.setText("No Room");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(187, 0, 0));
        jLabel9.setText("cus_id");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(187, 0, 0));
        jLabel10.setText("cus_group");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(187, 0, 0));
        jLabel11.setText("Arrival");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(187, 0, 0));
        jLabel12.setText("Departure");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(187, 0, 0));
        jLabel13.setText("Adult");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(187, 0, 0));
        jLabel14.setText("Child");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(187, 0, 0));
        jLabel15.setText("ED By");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(187, 0, 0));
        jLabel16.setText("ETD");

        jTextField1.setBackground(new java.awt.Color(255, 255, 204));
        jTextField1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(255, 255, 204));
        jTextField2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jTextField3.setBackground(new java.awt.Color(255, 255, 204));
        jTextField3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });

        jTextField4.setBackground(new java.awt.Color(255, 255, 204));
        jTextField4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField7.setBackground(new java.awt.Color(255, 255, 204));
        jTextField7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField8.setBackground(new java.awt.Color(255, 255, 204));
        jTextField8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jDateChooser1.setBackground(new java.awt.Color(255, 255, 204));
        jDateChooser1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jDateChooser2.setBackground(new java.awt.Color(255, 255, 204));
        jDateChooser2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField5.setBackground(new java.awt.Color(255, 255, 204));
        jTextField5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField6.setBackground(new java.awt.Color(255, 255, 204));
        jTextField6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton1.setBackground(new java.awt.Color(255, 255, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(187, 0, 0));
        jButton1.setText("ADD");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 204));
        jButton2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(187, 0, 0));
        jButton2.setText("DELETE");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(187, 0, 0));
        jButton3.setText("UPDATE");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(187, 0, 0));
        jButton4.setText("VIEW");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 204));
        jButton5.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(187, 0, 0));
        jButton5.setText("NEW");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(255, 255, 153));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Order", "No Room", "cus_id", "cus_group", "Arrival", "Departure", "Adult", "Child", "ETD", "ED By"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton26.setBackground(new java.awt.Color(255, 255, 204));
        jButton26.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton26.setForeground(new java.awt.Color(187, 0, 0));
        jButton26.setText("CLEAR");
        jButton26.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4))
                .addGap(34, 34, 34)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField5)
                    .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12))
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(jButton26))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 560));

        jPanel9.setBackground(new java.awt.Color(255, 204, 51));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(187, 0, 0));
        jLabel17.setText("ID");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(187, 0, 0));
        jLabel18.setText("Name");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(187, 0, 0));
        jLabel19.setText("Email");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(187, 0, 0));
        jLabel20.setText("Telp");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(187, 0, 0));
        jLabel21.setText("Alamat");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(187, 0, 0));
        jLabel22.setText("Pekerjaan");

        jTextField9.setBackground(new java.awt.Color(255, 255, 204));
        jTextField9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jTextField10.setBackground(new java.awt.Color(255, 255, 204));
        jTextField10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField11.setBackground(new java.awt.Color(255, 255, 204));
        jTextField11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField12.setBackground(new java.awt.Color(255, 255, 204));
        jTextField12.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField13.setBackground(new java.awt.Color(255, 255, 204));
        jTextField13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField14.setBackground(new java.awt.Color(255, 255, 204));
        jTextField14.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton6.setBackground(new java.awt.Color(255, 255, 204));
        jButton6.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(187, 0, 0));
        jButton6.setText("ADD");
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 204));
        jButton7.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(187, 0, 0));
        jButton7.setText("DELETE");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(255, 255, 204));
        jButton8.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(187, 0, 0));
        jButton8.setText("UPDATE");
        jButton8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 255, 204));
        jButton9.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(187, 0, 0));
        jButton9.setText("VIEW");
        jButton9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 255, 204));
        jButton10.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(187, 0, 0));
        jButton10.setText("NEW");
        jButton10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jTable2.setBackground(new java.awt.Color(255, 255, 153));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Telp", "Alamat", "Pekerjaan"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton27.setBackground(new java.awt.Color(255, 255, 204));
        jButton27.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton27.setForeground(new java.awt.Color(187, 0, 0));
        jButton27.setText("CLEAR");
        jButton27.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(49, 49, 49)
                        .addComponent(jTextField9))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(22, 22, 22)))
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel21)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jTextField13)
                    .addComponent(jTextField14))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(290, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel20)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel21)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10)
                    .addComponent(jButton27))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -2, 1150, 560));

        jPanel10.setBackground(new java.awt.Color(255, 204, 51));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(187, 0, 0));
        jLabel23.setText("ID Invoice");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(187, 0, 0));
        jLabel24.setText("Saldo Awal");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(187, 0, 0));
        jLabel25.setText("Saldo Akhir");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(187, 0, 0));
        jLabel26.setText("Debit");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(187, 0, 0));
        jLabel27.setText("Credit");

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(187, 0, 0));
        jLabel28.setText("Cash");

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(187, 0, 0));
        jLabel29.setText("Credit Card");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(187, 0, 0));
        jLabel30.setText("ID Order");

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(187, 0, 0));
        jLabel31.setText("Tanggal");

        jTextField15.setBackground(new java.awt.Color(255, 255, 204));
        jTextField15.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField16.setBackground(new java.awt.Color(255, 255, 204));
        jTextField16.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField17.setBackground(new java.awt.Color(255, 255, 204));
        jTextField17.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField18.setBackground(new java.awt.Color(255, 255, 204));
        jTextField18.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField19.setBackground(new java.awt.Color(255, 255, 204));
        jTextField19.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField20.setBackground(new java.awt.Color(255, 255, 204));
        jTextField20.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField21.setBackground(new java.awt.Color(255, 255, 204));
        jTextField21.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField22.setBackground(new java.awt.Color(255, 255, 204));
        jTextField22.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField22.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField22KeyPressed(evt);
            }
        });

        jDateChooser3.setBackground(new java.awt.Color(255, 255, 204));
        jDateChooser3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton11.setBackground(new java.awt.Color(255, 255, 204));
        jButton11.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(187, 0, 0));
        jButton11.setText("ADD");
        jButton11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(255, 255, 204));
        jButton12.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(187, 0, 0));
        jButton12.setText("DELETE");
        jButton12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(255, 255, 204));
        jButton13.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton13.setForeground(new java.awt.Color(187, 0, 0));
        jButton13.setText("UPDATE");
        jButton13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(255, 255, 204));
        jButton14.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton14.setForeground(new java.awt.Color(187, 0, 0));
        jButton14.setText("VIEW");
        jButton14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(255, 255, 204));
        jButton15.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton15.setForeground(new java.awt.Color(187, 0, 0));
        jButton15.setText("NEW");
        jButton15.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jTable3.setBackground(new java.awt.Color(255, 255, 153));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Invoice", "Saldo Awal", "Saldo Akhir", "Debit", "Credit", "Cash", "Credit Card", "ID Order", "Tanggal"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton28.setBackground(new java.awt.Color(255, 255, 204));
        jButton28.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton28.setForeground(new java.awt.Color(187, 0, 0));
        jButton28.setText("CLEAR");
        jButton28.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton20.setBackground(new java.awt.Color(255, 255, 204));
        jButton20.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton20.setForeground(new java.awt.Color(187, 0, 0));
        jButton20.setText("CALCULATE");
        jButton20.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField15)
                            .addComponent(jTextField16)
                            .addComponent(jTextField17, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(23, 23, 23)
                                .addComponent(jTextField18, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField19)
                                    .addComponent(jTextField20))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31))
                        .addGap(40, 40, 40)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel26)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jLabel29)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton20))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel27)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton13)
                    .addComponent(jButton14))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25)
                        .addComponent(jLabel28)
                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31))
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton15)
                        .addComponent(jButton28))
                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 560));

        jPanel11.setBackground(new java.awt.Color(255, 204, 51));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(187, 0, 0));
        jLabel32.setText("No Kamar");

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(187, 0, 0));
        jLabel33.setText("ID Type");

        jTextField23.setBackground(new java.awt.Color(255, 255, 204));
        jTextField23.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton16.setBackground(new java.awt.Color(255, 255, 204));
        jButton16.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton16.setForeground(new java.awt.Color(187, 0, 0));
        jButton16.setText("ADD");
        jButton16.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(255, 255, 204));
        jButton17.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton17.setForeground(new java.awt.Color(187, 0, 0));
        jButton17.setText("DELETE");
        jButton17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setBackground(new java.awt.Color(255, 255, 204));
        jButton18.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton18.setForeground(new java.awt.Color(187, 0, 0));
        jButton18.setText("UPDATE");
        jButton18.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(255, 255, 204));
        jButton19.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton19.setForeground(new java.awt.Color(187, 0, 0));
        jButton19.setText("VIEW");
        jButton19.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jTable4.setBackground(new java.awt.Color(255, 255, 153));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "No Kamar", "ID Type"
            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jButton29.setBackground(new java.awt.Color(255, 255, 204));
        jButton29.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton29.setForeground(new java.awt.Color(187, 0, 0));
        jButton29.setText("CLEAR");
        jButton29.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jComboBox4.setBackground(new java.awt.Color(255, 255, 204));
        jComboBox4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                .addContainerGap(728, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton18)
                        .addComponent(jButton19))
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel33)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addComponent(jButton29)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jPanel7.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 560));

        jPanel12.setBackground(new java.awt.Color(255, 204, 51));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(187, 0, 0));
        jLabel34.setText("ID Tipe");

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(187, 0, 0));
        jLabel35.setText("Kasur");

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(187, 0, 0));
        jLabel36.setText("ac");

        jLabel37.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(187, 0, 0));
        jLabel37.setText("Balkon");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(187, 0, 0));
        jLabel38.setText("Ruang Tamu");

        jLabel39.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(187, 0, 0));
        jLabel39.setText("Ruang Kerja");

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(187, 0, 0));
        jLabel40.setText("Harga");

        jTextField25.setBackground(new java.awt.Color(255, 255, 204));
        jTextField25.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField26.setBackground(new java.awt.Color(255, 255, 204));
        jTextField26.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextField27.setBackground(new java.awt.Color(255, 255, 204));
        jTextField27.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextField27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField27ActionPerformed(evt);
            }
        });

        jTextField28.setBackground(new java.awt.Color(255, 255, 204));
        jTextField28.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton21.setBackground(new java.awt.Color(255, 255, 204));
        jButton21.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton21.setForeground(new java.awt.Color(187, 0, 0));
        jButton21.setText("ADD");
        jButton21.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setBackground(new java.awt.Color(255, 255, 204));
        jButton22.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton22.setForeground(new java.awt.Color(187, 0, 0));
        jButton22.setText("DELETE");
        jButton22.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setBackground(new java.awt.Color(255, 255, 204));
        jButton23.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton23.setForeground(new java.awt.Color(187, 0, 0));
        jButton23.setText("UPDATE");
        jButton23.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setBackground(new java.awt.Color(255, 255, 204));
        jButton24.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton24.setForeground(new java.awt.Color(187, 0, 0));
        jButton24.setText("VIEW");
        jButton24.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jTable5.setBackground(new java.awt.Color(255, 255, 153));
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Tipe", "Kasur", "AC", "Balkon", "Ruang Tamu", "Ruang Kerja", "Harga"
            }
        ));
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ada", "Tidak Ada" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ada", "Tidak Ada" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ada", "Tidak Ada" }));

        jButton30.setBackground(new java.awt.Color(255, 255, 204));
        jButton30.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jButton30.setForeground(new java.awt.Color(187, 0, 0));
        jButton30.setText("CLEAR");
        jButton30.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField26, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField27, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jTextField25, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel38)
                            .addGap(18, 18, 18))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel37)
                            .addGap(67, 67, 67)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addGap(22, 22, 22)))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, 100, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(406, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jLabel37)
                    .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jButton21)
                    .addComponent(jButton22)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton30))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(jButton23)
                    .addComponent(jButton24)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 560));

        add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 1150, 560));
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        jPanel8.setVisible(false);
        jPanel9.setVisible(true);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        jPanel8.setVisible(true);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(true);
        jPanel11.setVisible(false);
        jPanel12.setVisible(false);
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(true);
        jPanel12.setVisible(false);
    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        jPanel8.setVisible(false);
        jPanel9.setVisible(false);
        jPanel10.setVisible(false);
        jPanel11.setVisible(false);
        jPanel12.setVisible(true);
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField27ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField27ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            String cusId = jTextField9.getText().trim();
            if (cusId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID Customer tidak boleh kosong");
                return; // Exit the method to prevent further processing
            }
            
            // SQL query to insert data into the 'customer' table
            String sql = "INSERT INTO customer VALUES (?, ?, ?, ?, ?, ?)";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Set the values for the parameters in the SQL query
                pstmt.setString(1, jTextField9.getText());
                pstmt.setString(2, jTextField10.getText());
                pstmt.setString(3, jTextField11.getText());
                pstmt.setString(4, jTextField12.getText());
                pstmt.setString(5, jTextField13.getText());
                pstmt.setString(6, jTextField14.getText());

                // Execute the SQL query
                pstmt.executeUpdate();
                mengosongkanTextField();
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil");
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error inserting data: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            // SQL query to retrieve all data from the 'customer' table
            String sql = "SELECT * FROM customer";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Execute the SQL query and store the result in a ResultSet
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    // Process the ResultSet, for example, display the data in a table or print it
                    while (rs.next()) {
                        boolean duplicate = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (rs.getString("cus_id").equals(model.getValueAt(i, 0))) {
                                duplicate = true;
                                break;
                            }
                        }

                        // If it's not a duplicate, add it to the table
                        if (!duplicate) {
                            model.insertRow(0, new Object[]{rs.getString("cus_id"), rs.getString("cus_name"), rs.getString("cus_email"), rs.getString("cus_telp"), rs.getString("cus_alamat"), rs.getString("cus_pekerjaan")});
                        }
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        mengosongkanTextField();
        autoGenerateCustomerId();
        jTextField9.setEditable(false);
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        mengosongkanTextField();
        jTextField9.setEditable(true);
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected rows indices from the table
            int[] selectedRows = jTable2.getSelectedRows();

            // Check if rows are selected
            if (selectedRows.length > 0) {
                
                int dialogResult = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the selected data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (dialogResult == JOptionPane.YES_OPTION) {
                    // SQL query to delete a customer from the 'customer' table
                    String sql = "DELETE FROM customer WHERE cus_id = ?";

                    // Create a PreparedStatement to safely execute the SQL query
                    try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                        // Loop through selected rows and delete each customer
                        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                        for (int i = selectedRows.length - 1; i >= 0; i--) {
                            // Get the customer ID from the selected row
                            String customerId = jTable2.getValueAt(selectedRows[i], 0).toString();

                            // Set the customer ID as the parameter in the SQL query
                            pstmt.setString(1, customerId);

                            // Execute the SQL query
                            pstmt.executeUpdate();

                            // Remove the selected row from the table
                            model.removeRow(selectedRows[i]);
                        }

                        JOptionPane.showMessageDialog(null, "Penghapusan Data Berhasil");
                        jButton6.setEnabled(true);
                    } catch (java.sql.SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                    }
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select rows to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected row index from the table
            int selectedRow = jTable2.getSelectedRow();

            // Check if a row is selected
            if (selectedRow >= 0) {
                // Get the customer ID from the selected row
                String customerId = jTable2.getValueAt(selectedRow, 0).toString();

                // SQL query to update customer data in the 'customer' table
                String sql = "UPDATE customer SET cus_name = ?, cus_email = ?, cus_telp = ?, cus_alamat = ?, cus_pekerjaan = ? WHERE cus_id = ?";

                // Create a PreparedStatement to safely execute the SQL query
                try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                    // Set the updated values for the parameters in the SQL query
                    pstmt.setString(1, jTextField10.getText()); // Updated customer name
                    pstmt.setString(2, jTextField11.getText()); // Updated customer email
                    pstmt.setString(3, jTextField12.getText()); // Updated customer telephone
                    pstmt.setString(4, jTextField13.getText()); // Updated customer address
                    pstmt.setString(5, jTextField14.getText()); // Updated customer occupation
                    pstmt.setString(6, customerId);            // Customer ID to identify the record to update

                    // Execute the SQL query
                    pstmt.executeUpdate();

                    // Update the table with the new data
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.setValueAt(jTextField10.getText(), selectedRow, 1); // Update customer name in the table
                    model.setValueAt(jTextField11.getText(), selectedRow, 2); // Update customer email in the table
                    model.setValueAt(jTextField12.getText(), selectedRow, 3); // Update customer telephone in the table
                    model.setValueAt(jTextField13.getText(), selectedRow, 4); // Update customer address in the table
                    model.setValueAt(jTextField14.getText(), selectedRow, 5); // Update customer occupation in the table

                    JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // get the model from the jtable
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

        // get the selected row index
        int selectedRowIndex = jTable2.getSelectedRow();

        // set the selected row data into jtextfields
        jTextField9.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextField10.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField11.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jTextField12.setText(model.getValueAt(selectedRowIndex, 3).toString());
        jTextField13.setText(model.getValueAt(selectedRowIndex, 4).toString());
        jTextField14.setText(model.getValueAt(selectedRowIndex, 5).toString());
        jTextField9.setEditable(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(true);
        jButton8.setEnabled(true);
        jButton9.setEnabled(true);
        jButton10.setEnabled(true);
        jButton27.setEnabled(true);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            String typeId = jTextField25.getText().trim();
            if (typeId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID Type tidak boleh kosong");
                return; // Exit the method to prevent further processing
            }
            
            // SQL query to insert data into the 'customer' table
            String sql = "INSERT INTO room_type VALUES (?, ?, ?, ?, ?, ?, ?)";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Set the values for the parameters in the SQL query
                pstmt.setString(1, jTextField25.getText());
                pstmt.setString(2, jTextField26.getText());
                pstmt.setString(3, jTextField27.getText());
                pstmt.setString(4, jComboBox1.getSelectedItem().toString());
                pstmt.setString(5, jComboBox2.getSelectedItem().toString());
                pstmt.setString(6, jComboBox3.getSelectedItem().toString());
                pstmt.setString(7, jTextField28.getText());

                // Execute the SQL query
                pstmt.executeUpdate();
                mengosongkanTextField();
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil");
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error inserting data: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            // SQL query to retrieve all data from the 'customer' table
            String sql = "SELECT * FROM room_type";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Execute the SQL query and store the result in a ResultSet
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    // Process the ResultSet, for example, display the data in a table or print it
                    while (rs.next()) {
                        boolean duplicate = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (rs.getString("type_id").equals(model.getValueAt(i, 0))) {
                                duplicate = true;
                                break;
                            }
                        }

                        // If it's not a duplicate, add it to the table
                        if (!duplicate) {
                            model.insertRow(0, new Object[]{rs.getString("type_id"), rs.getString("kasur"), rs.getString("ac"), rs.getString("balkon_pribadi"), rs.getString("ruang_tamu"), rs.getString("ruang_kerja"), rs.getString("harga")});
                        }
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
        // get the model from the jtable
        DefaultTableModel model = (DefaultTableModel)jTable5.getModel();

        // get the selected row index
        int selectedRowIndex = jTable5.getSelectedRow();

        // set the selected row data into jtextfields
        jTextField25.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextField26.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField27.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jComboBox1.setSelectedItem(model.getValueAt(selectedRowIndex, 3).toString());
        jComboBox2.setSelectedItem(model.getValueAt(selectedRowIndex, 4).toString());
        jComboBox3.setSelectedItem(model.getValueAt(selectedRowIndex, 5).toString());
        jTextField28.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jTextField9.setEditable(false);
        jButton21.setEnabled(false);
        jButton22.setEnabled(true);
        jButton23.setEnabled(true);
        jButton24.setEnabled(true);
        jButton30.setEnabled(true);
    }//GEN-LAST:event_jTable5MouseClicked

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        try {
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            int[] selectedRows = jTable5.getSelectedRows();

            if (selectedRows.length > 0) {
                
                int dialogResult = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the selected data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (dialogResult == JOptionPane.YES_OPTION) {
                    String sql = "DELETE FROM room_type WHERE type_id = ?";

                    try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
                        for (int i = selectedRows.length - 1; i >= 0; i--) {
                            String typeId = jTable5.getValueAt(selectedRows[i], 0).toString();

                            pstmt.setString(1, typeId);

                            pstmt.executeUpdate();

                            model.removeRow(selectedRows[i]);
                        }

                        JOptionPane.showMessageDialog(null, "Penghapusan Data Berhasil");
                        jButton21.setEnabled(true);
                    } catch (java.sql.SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                    }
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select rows to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected row index from the table
            int selectedRow = jTable5.getSelectedRow();

            // Check if a row is selected
            if (selectedRow >= 0) {
                // Get the customer ID from the selected row
                String typeId = jTable5.getValueAt(selectedRow, 0).toString();

                // SQL query to update customer data in the 'customer' table
                String sql = "UPDATE room_type SET kasur = ?, ac = ?, balkon_pribadi = ?, ruang_tamu = ?, ruang_kerja = ?, harga = ? WHERE type_id = ?";

                // Create a PreparedStatement to safely execute the SQL query
                try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                    // Set the updated values for the parameters in the SQL query
                    pstmt.setString(1, jTextField26.getText()); // Updated customer name
                    pstmt.setString(2, jTextField27.getText()); // Updated customer email
                    pstmt.setString(3, jComboBox1.getSelectedItem().toString()); // Updated customer telephone
                    pstmt.setString(4, jComboBox2.getSelectedItem().toString()); // Updated customer address
                    pstmt.setString(5, jComboBox3.getSelectedItem().toString()); // Updated customer occupation
                    pstmt.setString(6, jTextField28.getText());
                    pstmt.setString(7, typeId);            // Customer ID to identify the record to update

                    // Execute the SQL query
                    pstmt.executeUpdate();

                    // Update the table with the new data
                    DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
                    model.setValueAt(jTextField26.getText(), selectedRow, 1); // Update customer name in the table
                    model.setValueAt(jTextField27.getText(), selectedRow, 2); // Update customer email in the table
                    model.setValueAt(jComboBox1.getSelectedItem().toString(), selectedRow, 3); // Update customer telephone in the table
                    model.setValueAt(jComboBox2.getSelectedItem().toString(), selectedRow, 4); // Update customer address in the table
                    model.setValueAt(jComboBox3.getSelectedItem().toString(), selectedRow, 5); // Update customer occupation in the table
                    model.setValueAt(jTextField28.getText(), selectedRow, 6); // Update customer occupation in the table
                    
                    JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        mengosongkanTextField();
        jTextField25.setEditable(true);
        jButton21.setEnabled(true);
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            String roomID = jTextField23.getText().trim();
            if (roomID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nomor Kamar Tidak Boleh Kosong");
                return; // Exit the method to prevent further processing
            }
            
            // SQL query to insert data into the 'customer' table
            String sql = "INSERT INTO room VALUES (?, ?)";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Set the values for the parameters in the SQL query
                pstmt.setString(1, jTextField23.getText());
                pstmt.setString(2, jComboBox4.getSelectedItem().toString());

                // Execute the SQL query
                pstmt.executeUpdate();
                mengosongkanTextField();
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil");
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Kamar sudah tersedia");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            // SQL query to retrieve all data from the 'customer' table
            String sql = "SELECT * FROM room";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Execute the SQL query and store the result in a ResultSet
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    // Process the ResultSet, for example, display the data in a table or print it
                    while (rs.next()) {
                        boolean duplicate = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (rs.getString("room_num").equals(model.getValueAt(i, 0))) {
                                duplicate = true;
                                break;
                            }
                        }

                        // If it's not a duplicate, add it to the table
                        if (!duplicate) {
                            model.insertRow(0, new Object[]{rs.getString("room_num"), rs.getString("type_id")});
                        }
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // get the model from the jtable
        DefaultTableModel model = (DefaultTableModel)jTable4.getModel();

        // get the selected row index
        int selectedRowIndex = jTable4.getSelectedRow();

        // set the selected row data into jtextfields
        jTextField23.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jComboBox4.setSelectedItem(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField23.setEditable(false);
        jButton16.setEnabled(false);
        jButton17.setEnabled(true);
        jButton18.setEnabled(true);
        jButton19.setEnabled(true);
        jButton29.setEnabled(true);
    }//GEN-LAST:event_jTable4MouseClicked

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try {
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            int[] selectedRows = jTable4.getSelectedRows();

            if (selectedRows.length > 0) {
                
                int dialogResult = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the selected data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (dialogResult == JOptionPane.YES_OPTION) {
                    String sql = "DELETE FROM room WHERE room_num = ?";

                    try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
                        for (int i = selectedRows.length - 1; i >= 0; i--) {
                            String roomNum = jTable4.getValueAt(selectedRows[i], 0).toString();

                            pstmt.setString(1, roomNum);

                            pstmt.executeUpdate();

                            model.removeRow(selectedRows[i]);
                        }

                        JOptionPane.showMessageDialog(null, "Penghapusan Data Berhasil");
                        jButton16.setEnabled(true);
                    } catch (java.sql.SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                    }
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select rows to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected row index from the table
            int selectedRow = jTable4.getSelectedRow();

            // Check if a row is selected
            if (selectedRow >= 0) {
                // Get the customer ID from the selected row
                String roomNum = jTable4.getValueAt(selectedRow, 0).toString();

                // SQL query to update customer data in the 'customer' table
                String sql = "UPDATE room SET type_id = ? WHERE room_num = ?";

                // Create a PreparedStatement to safely execute the SQL query
                try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                    // Set the updated values for the parameters in the SQL query
                    pstmt.setString(1, jComboBox4.getSelectedItem().toString()); // Updated customer name
                    pstmt.setString(2, roomNum);            // Customer ID to identify the record to update

                    // Execute the SQL query
                    pstmt.executeUpdate();

                    // Update the table with the new data
                    DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
                    model.setValueAt(jComboBox4.getSelectedItem().toString(), selectedRow, 1); // Update customer name in the table
                    
                    JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        mengosongkanTextField();
        jTextField23.setEditable(true);
        jButton16.setEnabled(true);
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        try {
            String search = jTextField2.getText().trim();
            if (!search.equals("")) {
                // Call the method to get search suggestions
                String[] suggestions = searchSuggestionRoomNum(search);

                // Display suggestions in a JList
                JList<String> suggestionList = new JList<>(suggestions);
                JScrollPane scrollPane = new JScrollPane(suggestionList);

                // Show the JList as a pop-up near the JTextField
                menu.removeAll();
                menu.add(scrollPane);
                menu.setVisible(true);
                menu.show(jTextField2, 0, jTextField2.getHeight());
            } else {
                // Hide the suggestion pop-up if the search string is empty
                menu.setVisible(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error getting search suggestions: " + e.getMessage());
        }
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased
        try {
            String search = jTextField3.getText().trim();
            if (!search.equals("")) {
                // Call the method to get search suggestions
                String[] suggestions = searchSuggestionCusId(search);

                // Display suggestions in a JList
                JList<String> suggestionList = new JList<>(suggestions);
                JScrollPane scrollPane = new JScrollPane(suggestionList);

                // Show the JList as a pop-up near the JTextField
                menu2.removeAll();
                menu2.add(scrollPane);
                menu2.setVisible(true);
                menu2.show(jTextField3, 0, jTextField3.getHeight());
            } else {
                // Hide the suggestion pop-up if the search string is empty
                menu2.setVisible(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error getting search suggestions: " + e.getMessage());
        }
    }//GEN-LAST:event_jTextField3KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            String orderId = jTextField1.getText().trim();
            if (orderId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID Order tidak boleh kosong");
                return; // Exit the method to prevent further processing
            }

            // SQL queries to insert data into the 'ordering' and 'order_room' tables
            String sqlOrdering = "INSERT INTO ordering VALUES (?,?,?,?,?,?,?,?,?)";
            String sqlOrderRoom = "INSERT INTO order_room VALUES (?, ?)";

            // Create a PreparedStatement to safely execute the SQL queries
            try (java.sql.PreparedStatement pstmtOrdering = connection.prepareStatement(sqlOrdering);
                 java.sql.PreparedStatement pstmtOrderRoom = connection.prepareStatement(sqlOrderRoom)) {

                // Set the values for the parameters in the first SQL query (ordering)
                pstmtOrdering.setString(1, jTextField1.getText());
                // Convert java.util.Date to java.sql.Date and format it
                java.sql.Date sqlDate1 = new java.sql.Date(jDateChooser1.getDate().getTime());
                pstmtOrdering.setDate(2, sqlDate1);

                // Convert java.util.Date to java.sql.Date and format it
                java.sql.Date sqlDate2 = new java.sql.Date(jDateChooser2.getDate().getTime());
                pstmtOrdering.setDate(3, sqlDate2);
                pstmtOrdering.setString(4, jTextField4.getText());
                pstmtOrdering.setString(5, jTextField7.getText());
                pstmtOrdering.setString(6, jTextField8.getText());
                pstmtOrdering.setString(7, jTextField5.getText());
                pstmtOrdering.setString(8, jTextField6.getText());
                pstmtOrdering.setString(9, jTextField3.getText());

                // Add the first SQL query to the batch
                pstmtOrdering.addBatch();

                // Set the values for the parameters in the second SQL query (order_room)
                pstmtOrderRoom.setString(1, jTextField1.getText());
                pstmtOrderRoom.setString(2, jTextField2.getText());

                // Add the second SQL query to the batch
                pstmtOrderRoom.addBatch();

                // Execute the batch of SQL queries
                pstmtOrdering.executeBatch();
                pstmtOrderRoom.executeBatch();

                // Clear the batch to release resources
                pstmtOrdering.clearBatch();
                pstmtOrderRoom.clearBatch();

                mengosongkanTextField();
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil");
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error inserting data: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        mengosongkanTextField();
        autoGenerateRandomIdOrder();
        jTextField1.setEditable(false);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected rows indices from the table
            int[] selectedRows = jTable1.getSelectedRows();

            // Check if rows are selected
            if (selectedRows.length > 0) {

                int dialogResult = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the selected data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION
                );

                if (dialogResult == JOptionPane.YES_OPTION) {
                    // SQL query to delete data from the 'order_room' table
                    String deleteOrderRoom = "DELETE FROM order_room WHERE ordering_id = ?";

                    // SQL query to delete data from the 'ordering' table
                    String deleteOrdering = "DELETE FROM ordering WHERE ordering_id = ?";

                    // Create PreparedStatements for deleting order rooms and orders
                    try (java.sql.PreparedStatement pstmtOrderRoom = connection.prepareStatement(deleteOrderRoom);
                        java.sql.PreparedStatement pstmtOrdering = connection.prepareStatement(deleteOrdering)) {

                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                        for (int i = selectedRows.length - 1; i >= 0; i--) {
                            // Get the ordering ID from the selected row
                            String orderingId = jTable1.getValueAt(selectedRows[i], 0).toString();

                            // Set the ordering ID as the parameter in the SQL query for order room deletion
                            pstmtOrderRoom.setString(1, orderingId);

                            // Execute the SQL query for order room deletion
                            pstmtOrderRoom.executeUpdate();

                            // Set the ordering ID as the parameter in the SQL query for ordering deletion
                            pstmtOrdering.setString(1, orderingId);

                            // Execute the SQL query for ordering deletion
                            pstmtOrdering.executeUpdate();

                            // Remove the selected row from the table
                            model.removeRow(selectedRows[i]);
                        }

                        JOptionPane.showMessageDialog(null, "Penghapusan Data Berhasil");
                        jButton1.setEnabled(true);
                    } catch (java.sql.SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select rows to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            // SQL query to retrieve all data from the 'customer' table
            String sql = "SELECT * FROM ordering INNER JOIN order_room ON ordering.ordering_id = order_room.ordering_id;";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Execute the SQL query and store the result in a ResultSet
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    // Process the ResultSet, for example, display the data in a table or print it
                    while (rs.next()) {
                        boolean duplicate = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (rs.getString("ordering_id").equals(model.getValueAt(i, 0))) {
                                duplicate = true;
                                break;
                            }
                        }

                        // If it's not a duplicate, add it to the table
                        if (!duplicate) {
                            model.insertRow(0, new Object[]{rs.getString("ordering_id"), rs.getString("room_num"), rs.getString("cus_id"), 
                                rs.getString("cus_group"), rs.getDate("arrival"), rs.getDate("departure"), rs.getString("adult"), 
                                rs.getString("child"), rs.getString("ETD"), rs.getString("ED_By")});
                        }
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        mengosongkanTextField();
        jTextField1.setEditable(true);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton26ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODadd your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // get the model from the jtable
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

        // get the selected row index
        int selectedRowIndex = jTable1.getSelectedRow();

        // set the selected row data into jtextfields
        jTextField1.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextField2.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField3.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jTextField4.setText(model.getValueAt(selectedRowIndex, 3).toString());
        jTextField5.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jTextField6.setText(model.getValueAt(selectedRowIndex, 7).toString());
        jTextField7.setText(model.getValueAt(selectedRowIndex, 8).toString());
        jTextField8.setText(model.getValueAt(selectedRowIndex, 9).toString());
        
        jTextField1.setEditable(false);
        jButton1.setEnabled(false);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton26.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected row index from the table
            int selectedRow = jTable1.getSelectedRow();

            // Check if a row is selected
            if (selectedRow >= 0) {
                // Get the ordering ID from the selected row
                String orderingId = jTable1.getValueAt(selectedRow, 0).toString();

                // SQL query to update ordering data in the 'ordering' table
                String updateOrdering = "UPDATE ordering SET arrival = ?, departure = ?, cus_group = ?, ETD = ?, ED_By = ?, adult = ?, child = ?, cus_id = ? WHERE ordering_id = ?";

                // SQL query to update order room data in the 'order_room' table
                String updateOrderRoom = "UPDATE order_room SET room_num = ? WHERE ordering_id = ?";

                // Create PreparedStatements to safely execute the SQL queries
                try (java.sql.PreparedStatement pstmtOrdering = connection.prepareStatement(updateOrdering);
                    java.sql.PreparedStatement pstmtOrderRoom = connection.prepareStatement(updateOrderRoom)) {

                    // Convert java.util.Date to java.sql.Date and format it
                    java.sql.Date sqlDate1 = new java.sql.Date(jDateChooser1.getDate().getTime());
                    pstmtOrdering.setDate(1, sqlDate1);
                    // Convert java.util.Date to java.sql.Date and format it
                    java.sql.Date sqlDate2 = new java.sql.Date(jDateChooser2.getDate().getTime());
                    pstmtOrdering.setDate(2, sqlDate2);
                    pstmtOrdering.setString(3, jTextField4.getText());
                    pstmtOrdering.setString(4, jTextField7.getText());
                    pstmtOrdering.setString(5, jTextField8.getText());
                    pstmtOrdering.setString(6, jTextField5.getText());
                    pstmtOrdering.setString(7, jTextField6.getText());
                    pstmtOrdering.setString(8, jTextField3.getText());
                    pstmtOrdering.setString(9, orderingId);

                    // Set the updated values for the parameters in the SQL query for order room update
                    pstmtOrderRoom.setString(1, jTextField2.getText());
                    pstmtOrderRoom.setString(2, orderingId);

                    // Execute the SQL queries
                    pstmtOrdering.executeUpdate();
                    pstmtOrderRoom.executeUpdate();

                    // Update the table with the new data
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setValueAt(jTextField2.getText(), selectedRow, 1);
                    model.setValueAt(jTextField3.getText(), selectedRow, 2);
                    model.setValueAt(jTextField4.getText(), selectedRow, 3);
                    // Format untuk menampilkan tanggal di tabel
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    // Di dalam try block
                    java.util.Date date1 = jDateChooser1.getDate();
                    java.util.Date date2 = jDateChooser2.getDate();

                    // Format tanggal ke dalam string sesuai dengan format yang diinginkan
                    String formattedDate1 = (date1 != null) ? dateFormat.format(date1) : null;
                    String formattedDate2 = (date2 != null) ? dateFormat.format(date2) : null;

                    // Setelah itu, set nilai dalam tabel dengan string yang telah diformat
                    model.setValueAt(formattedDate1, selectedRow, 4);
                    model.setValueAt(formattedDate2, selectedRow, 5);

                    model.setValueAt(jTextField5.getText(), selectedRow, 6);
                    model.setValueAt(jTextField6.getText(), selectedRow, 7);
                    model.setValueAt(jTextField7.getText(), selectedRow, 8);
                    model.setValueAt(jTextField8.getText(), selectedRow, 9);

                    JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            String invoiceId = jTextField15.getText().trim();
            if (invoiceId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID Invoice tidak boleh kosong");
                return; // Exit the method to prevent further processing
            }
            
            // SQL query to insert data into the 'customer' table
            String sql = "INSERT INTO invoice VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Set the values for the parameters in the SQL query
                pstmt.setString(1, jTextField15.getText());
                pstmt.setString(2, jTextField16.getText());
                pstmt.setString(3, jTextField17.getText());
                pstmt.setString(4, jTextField18.getText());
                pstmt.setString(5, jTextField19.getText());
                pstmt.setString(6, jTextField20.getText());
                pstmt.setString(7, jTextField21.getText());
                pstmt.setString(8, jTextField22.getText());
                java.sql.Date sqlDate = new java.sql.Date(jDateChooser3.getDate().getTime());
                pstmt.setDate(9, sqlDate);

                // Execute the SQL query
                pstmt.executeUpdate();
                mengosongkanTextField();
                JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil");
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error inserting data: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        mengosongkanTextField();
        autoGenerateRandomIdInvoice();
        jTextField15.setEditable(false);
        jButton11.setEnabled(true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        mengosongkanTextField();
        jTextField15.setEditable(true);
        jButton11.setEnabled(true);
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jTextField22KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField22KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                // Get the connection
                java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

                // SQL query to calculate total_harga based on ordering_id
                String query = "SELECT room_type.harga * DATEDIFF(DAY, arrival, departure) AS total_harga " +
                               "FROM ordering " +
                               "JOIN order_room ON ordering.ordering_id = order_room.ordering_id " +
                               "JOIN room ON order_room.room_num = room.room_num " +
                               "JOIN room_type ON room.type_id = room_type.type_id " +
                               "WHERE ordering.ordering_id = ?";

                // Create a PreparedStatement to safely execute the SQL query
                try (java.sql.PreparedStatement pstmt = connection.prepareStatement(query)) {
                    // Set the ordering_id as the parameter in the SQL query
                    pstmt.setString(1, jTextField22.getText());

                    // Execute the SQL query and get the result
                    try (java.sql.ResultSet resultSet = pstmt.executeQuery()) {
                        if (resultSet.next()) {
                            // Get the total_harga from the result set
                            int totalHarga = resultSet.getInt("total_harga");

                            // Set the value to jTextField16
                            jTextField16.setText(String.valueOf(totalHarga));
                        } else {
                            JOptionPane.showMessageDialog(this, "Data not found for the specified ordering_id");
                        }
                    }
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jTextField22KeyPressed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Retrieve the values from the JTextFields
            int saldoAwal = Integer.parseInt(jTextField16.getText());
            int debit = Integer.parseInt(jTextField18.getText());
            int credit = Integer.parseInt(jTextField19.getText());
            int cash = Integer.parseInt(jTextField20.getText());
            int creditCard = Integer.parseInt(jTextField21.getText());
            
            // Calculate saldo_akhir
            int saldoAkhir = saldoAwal + debit - credit - cash - creditCard;

            // Set the calculated saldo_akhir value to jTextField17
            jTextField17.setText(String.valueOf(saldoAkhir));

        } catch (NumberFormatException e) {
            // Handle the case where the input values are not valid numbers
            JOptionPane.showMessageDialog(this, "Invalid numeric input. Please enter valid numbers.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error calculating saldo_akhir: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected rows indices from the table
            int[] selectedRows = jTable3.getSelectedRows();

            // Check if rows are selected
            if (selectedRows.length > 0) {
                
                int dialogResult = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the selected data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (dialogResult == JOptionPane.YES_OPTION) {
                    // SQL query to delete a customer from the 'customer' table
                    String sql = "DELETE FROM invoice WHERE kode_invoice = ?";

                    // Create a PreparedStatement to safely execute the SQL query
                    try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                        // Loop through selected rows and delete each customer
                        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
                        for (int i = selectedRows.length - 1; i >= 0; i--) {
                            // Get the customer ID from the selected row
                            String kodeInvoice = jTable3.getValueAt(selectedRows[i], 0).toString();

                            // Set the customer ID as the parameter in the SQL query
                            pstmt.setString(1, kodeInvoice);

                            // Execute the SQL query
                            pstmt.executeUpdate();

                            // Remove the selected row from the table
                            model.removeRow(selectedRows[i]);
                        }

                        JOptionPane.showMessageDialog(null, "Penghapusan Data Berhasil");
                        jButton11.setEnabled(true);
                    } catch (java.sql.SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error deleting data: " + e.getMessage());
                    }
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "Please select rows to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();

            // Get the selected row index from the table
            int selectedRow = jTable3.getSelectedRow();

            // Check if a row is selected
            if (selectedRow >= 0) {
                // Get the customer ID from the selected row
                String kodeInvoice = jTable3.getValueAt(selectedRow, 0).toString();

                // SQL query to update customer data in the 'customer' table
                String sql = "UPDATE invoice SET saldo_awal = ?, saldo_akhir = ?, debit = ?, credit = ?, cash = ?, credit_card = ?, ordering_id = ?, tanggal = ? WHERE kode_invoice = ?";

                // Create a PreparedStatement to safely execute the SQL query
                try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                    // Set the updated values for the parameters in the SQL query
                    pstmt.setString(1, jTextField16.getText()); // Updated customer name
                    pstmt.setString(2, jTextField17.getText()); // Updated customer email
                    pstmt.setString(3, jTextField18.getText()); // Updated customer telephone
                    pstmt.setString(4, jTextField19.getText()); // Updated customer address
                    pstmt.setString(5, jTextField20.getText()); // Updated customer occupation
                    pstmt.setString(6, jTextField21.getText()); // Updated customer occupation
                    pstmt.setString(7, jTextField22.getText()); // Updated customer occupation
                    java.sql.Date sqlDate = new java.sql.Date(jDateChooser3.getDate().getTime());
                    pstmt.setDate(8, sqlDate);
                    pstmt.setString(9, kodeInvoice);            // Customer ID to identify the record to update

                    // Execute the SQL query
                    pstmt.executeUpdate();

                    // Update the table with the new data
                    DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
                    model.setValueAt(jTextField16.getText(), selectedRow, 1); // Update customer name in the table
                    model.setValueAt(jTextField17.getText(), selectedRow, 2); // Update customer email in the table
                    model.setValueAt(jTextField18.getText(), selectedRow, 3); // Update customer telephone in the table
                    model.setValueAt(jTextField19.getText(), selectedRow, 4); // Update customer address in the table
                    model.setValueAt(jTextField20.getText(), selectedRow, 5); // Update customer occupation in the table
                    model.setValueAt(jTextField21.getText(), selectedRow, 6); // Update customer address in the table
                    model.setValueAt(jTextField22.getText(), selectedRow, 7); // Update customer occupation in the table
                    // Format untuk menampilkan tanggal di tabel
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    // Di dalam try block
                    java.util.Date date = jDateChooser3.getDate();

                    // Format tanggal ke dalam string sesuai dengan format yang diinginkan
                    String formattedDate = (date != null) ? dateFormat.format(date) : null;

                    // Setelah itu, set nilai dalam tabel dengan string yang telah diformat
                    model.setValueAt(formattedDate, selectedRow, 8);
                    
                    JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                } catch (java.sql.SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating data: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        try {
            // Get the connection
            java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();

            // SQL query to retrieve all data from the 'customer' table
            String sql = "SELECT * FROM invoice";

            // Create a PreparedStatement to safely execute the SQL query
            try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
                // Execute the SQL query and store the result in a ResultSet
                try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                    // Process the ResultSet, for example, display the data in a table or print it
                    while (rs.next()) {
                        boolean duplicate = false;
                        for (int i = 0; i < model.getRowCount(); i++) {
                            if (rs.getString("kode_invoice").equals(model.getValueAt(i, 0))) {
                                duplicate = true;
                                break;
                            }
                        }

                        // If it's not a duplicate, add it to the table
                        if (!duplicate) {
                            model.insertRow(0, new Object[]{rs.getString("kode_invoice"), rs.getString("saldo_awal"), rs.getString("saldo_akhir"), rs.getString("debit"), rs.getString("credit"), rs.getString("cash"), rs.getString("credit_card"), rs.getString("ordering_id"), rs.getDate("tanggal")});
                        }
                    }
                }
            } catch (java.sql.SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // get the model from the jtable
        DefaultTableModel model = (DefaultTableModel)jTable3.getModel();

        // get the selected row index
        int selectedRowIndex = jTable3.getSelectedRow();

        // set the selected row data into jtextfields
        jTextField15.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextField16.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField17.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jTextField18.setText(model.getValueAt(selectedRowIndex, 3).toString());
        jTextField19.setText(model.getValueAt(selectedRowIndex, 4).toString());
        jTextField20.setText(model.getValueAt(selectedRowIndex, 5).toString());
        jTextField21.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jTextField22.setText(model.getValueAt(selectedRowIndex, 7).toString());
        jTextField15.setEditable(false);
        jButton11.setEnabled(false);
        jButton12.setEnabled(true);
        jButton13.setEnabled(true);
        jButton14.setEnabled(true);
        jButton15.setEnabled(true);
        jButton20.setEnabled(true);
        jButton28.setEnabled(true);
    }//GEN-LAST:event_jTable3MouseClicked

    @Override
    protected void paintChildren(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        GradientPaint gp = new GradientPaint(0,0,Color.decode("#FFFFFF"),0,getHeight(),Color.decode("#FFEFBA"));
        g2.setPaint(gp);
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
        g2.fillRect(getWidth() - 20, 0, getWidth(), getHeight());
        super.paintChildren(g); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
    
    private int x;
    private int y;

    public void initMoving(JFrame frame) {
        jPanel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                x = e.getX();
                y = e.getY();
            }

        });
        jPanel1.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                frame.setLocation(e.getXOnScreen() - x, e.getYOnScreen() - y);
            }
        });
    }
    
    private void updateComboBox(){
        try{
            String sql = "select * from room_type";
            java.sql.Connection connection = (java.sql.Connection) connectsql.getKoneksi();
            java.sql.PreparedStatement pstmt = connection.prepareStatement(sql);
            java.sql.ResultSet rs = pstmt.executeQuery();
            while(rs.next()){
                jComboBox4.addItem(rs.getString("type_id"));
            }
        }catch(Exception e){
            
        }
    }
    
    private String generateRandomIdOrder() {
        // Define the characters allowed in the generated ID
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

        // Create a StringBuilder to store the generated ID
        StringBuilder generatedId = new StringBuilder();

        // Generate a random 5-character ID with uppercase letters
        for (int i = 0; i < 5; i++) {
            int randomIndex = (int) (Math.random() * 26); // 26 uppercase letters
            char randomChar = characters.charAt(randomIndex);
            generatedId.append(randomChar);
        }

        // Generate a random 5-character ID with digits
        for (int i = 0; i < 5; i++) {
            int randomIndex = (int) (Math.random() * 10); // 10 digits
            char randomDigit = characters.charAt(randomIndex + 26); // Start from index 26 for digits
            generatedId.append(randomDigit);
        }

        return generatedId.toString();
    }

    private void autoGenerateRandomIdOrder() {
        boolean isDuplicateId = true;
        String generatedId = null;

        // Keep generating a new ID until a non-duplicate is found
        while (isDuplicateId) {
            generatedId = generateRandomIdOrder();

            // Check if the generated ID already exists in the table
            isDuplicateId = isDuplicateIdOrder(generatedId);
        }

        // Set the generated ID to jTextField1
        jTextField1.setText(generatedId);
    }

    private boolean isDuplicateIdOrder(String idToCheck) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        // Check if the generated ID already exists in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            if (idToCheck.equals(model.getValueAt(i, 0))) {
                // ID is a duplicate
                return true;
            }
        }

        // ID is not a duplicate
        return false;
    }
    
    private String generateRandomIdInvoice() {
        // Define the characters allowed in the generated ID
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

        // Create a StringBuilder to store the generated ID
        StringBuilder generatedId = new StringBuilder();

        // Generate a random 4-character ID with uppercase letters
        for (int i = 0; i < 4; i++) {
            int randomIndex = (int) (Math.random() * 26); // 26 uppercase letters
            char randomChar = characters.charAt(randomIndex);
            generatedId.append(randomChar);
        }

        // Generate a random 3-character ID with digits
        for (int i = 0; i < 3; i++) {
            int randomIndex = (int) (Math.random() * 10); // 10 digits
            char randomDigit = characters.charAt(randomIndex + 26); // Start from index 26 for digits
            generatedId.append(randomDigit);
        }

        return generatedId.toString();
    }

    private void autoGenerateRandomIdInvoice() {
        boolean isDuplicateId = true;
        String generatedId = null;

        // Keep generating a new ID until a non-duplicate is found
        while (isDuplicateId) {
            generatedId = generateRandomIdInvoice();

            // Check if the generated ID already exists in the table
            isDuplicateId = isDuplicateIdInvoice(generatedId);
        }

        // Set the generated ID to jTextField15
        jTextField15.setText(generatedId);
    }

    private boolean isDuplicateIdInvoice(String idToCheck) {
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();

        // Check if the generated ID already exists in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            if (idToCheck.equals(model.getValueAt(i, 0))) {
                // ID is a duplicate
                return true;
            }
        }

        // ID is not a duplicate
        return false;
    }
    
    private String generateRandomId() {
        // Define the characters allowed in the generated ID
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        // Create a StringBuilder to store the generated ID
        StringBuilder generatedId = new StringBuilder();

        // Generate a random 5-character ID
        for (int i = 0; i < 5; i++) {
            int randomIndex = (int) (Math.random() * characters.length());
            char randomChar = characters.charAt(randomIndex);
            generatedId.append(randomChar);
        }

        return generatedId.toString();
    }
    
    private void autoGenerateCustomerId() {
        boolean isDuplicateId = true;
        String generatedId = null;

        // Keep generating a new ID until a non-duplicate is found
        while (isDuplicateId) {
            generatedId = generateRandomId();

            // Check if the generated ID already exists in the table
            isDuplicateId = isDuplicateCustomerId(generatedId);
        }

        // Set the generated ID to jTextField1
        jTextField9.setText(generatedId);
    }

    private boolean isDuplicateCustomerId(String idToCheck) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        // Check if the generated ID already exists in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            if (idToCheck.equals(model.getValueAt(i, 0))) {
                // ID is a duplicate
                return true;
            }
        }

        // ID is not a duplicate
        return false;
    }
    
    public String[] searchSuggestionCusId(String search) throws java.sql.SQLException {
        // Your database connection code should be somewhere before this point
        java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();
        
        // SQL query to retrieve room_num values based on the search string
        String sql = "SELECT cus_id FROM customer WHERE cus_id LIKE ?";

        // Create a PreparedStatement to safely execute the SQL query
        try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, "%" + search + "%");

            // Execute the SQL query and store the result in a ResultSet
            try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                // Extract room_num values from the ResultSet and add them to an ArrayList
                ArrayList<String> suggestionList = new ArrayList<>();
                while (rs.next()) {
                    suggestionList.add(rs.getString("cus_id"));
                }

                // Convert the ArrayList to an array of Strings
                String[] suggestionsArray = suggestionList.toArray(new String[0]);

                // Clear the existing suggestions
                menu2.removeAll();

                // Show the new suggestions
                for (String suggestion : suggestionsArray) {
                    JMenuItem item = new JMenuItem(suggestion);
                    item.addActionListener(e -> {
                        // Set the selected suggestion to the JTextField
                        jTextField3.setText(suggestion);
                        // Hide the suggestion pop-up
                        menu2.setVisible(false);
                    });
                    menu2.add(item);
                }

                // Return the array of suggestions
                return suggestionsArray;
            }
        }
    }
    
    public String[] searchSuggestionRoomNum(String search) throws java.sql.SQLException {
        // Your database connection code should be somewhere before this point
        java.sql.Connection connection = (java.sql.Connection)connectsql.getKoneksi();
        
        // SQL query to retrieve room_num values based on the search string
        String sql = "SELECT room_num FROM room WHERE room_num LIKE ?";

        // Create a PreparedStatement to safely execute the SQL query
        try (java.sql.PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, "%" + search + "%");

            // Execute the SQL query and store the result in a ResultSet
            try (java.sql.ResultSet rs = pstmt.executeQuery()) {
                // Extract room_num values from the ResultSet and add them to an ArrayList
                ArrayList<String> suggestionList = new ArrayList<>();
                while (rs.next()) {
                    suggestionList.add(rs.getString("room_num"));
                }

                // Convert the ArrayList to an array of Strings
                String[] suggestionsArray = suggestionList.toArray(new String[0]);

                // Clear the existing suggestions
                menu.removeAll();

                // Show the new suggestions
                for (String suggestion : suggestionsArray) {
                    JMenuItem item = new JMenuItem(suggestion);
                    item.addActionListener(e -> {
                        // Set the selected suggestion to the JTextField
                        jTextField2.setText(suggestion);
                        // Hide the suggestion pop-up
                        menu.setVisible(false);
                    });
                    menu.add(item);
                }

                // Return the array of suggestions
                return suggestionsArray;
            }
        }
    }

    private void mengosongkanTextField(){
        jTextField9.setText("");
        jTextField10.setText("");
        jTextField11.setText("");
        jTextField12.setText("");
        jTextField13.setText("");
        jTextField14.setText("");
        jTextField25.setText("");
        jTextField26.setText("");
        jTextField27.setText("");
        jTextField28.setText("");
        jTextField23.setText("");
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jDateChooser1.setDate(null);
        jDateChooser2.setDate(null);
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField15.setText("");
        jTextField16.setText("");
        jTextField17.setText("");
        jTextField18.setText("");
        jTextField19.setText("");
        jTextField20.setText("");
        jTextField21.setText("");
        jTextField22.setText("");
        jDateChooser3.setDate(null);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JList<String> list;
    private javax.swing.JList<String> list2;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JPopupMenu menu2;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panel2;
    // End of variables declaration//GEN-END:variables
}